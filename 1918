#include <iostream>

//переменная на которую надо делить
const long long M = 1000000007;

int n;
//количество монет, полученных при использовании i-го рычага и находясь в состоянии с j монетами
long long d[2][5000], 
//сумма всех значений d[][k], где 1 ≤ k ≤ n
                    s[2][5000];

int main() 
{
	//количество рычагов
	std::cin >> n;


	//проходим по монетам
	for (int i = 1; i <= n; i++) 
	{
		//проходим по рычагам
		for (int j = 1; j <= n; j++) 
		{
			// при одной монете на платформе, всегда можно получить еще n монет
			if (i == 1)
				d[1][j] = 1;
			// если на платформе монет больше, чем положений рычагов, то получаем n^i монет
			else if (i > j) 
			{
				d[1][j] = (d[0][j] * (long long)n) % M;
			}
			else {
				// иначе, используя предыдущее состояние, вычисляем количество монет
				// которое можно получить с учетом текущего положения рычагов
				d[1][j] = (d[0][j] * (long long)j) % M;
				// если на платформе монет меньше, чем положений рычагов
				// то учитываем монеты, которые можно получить, если использовать рычаги в предыдущем состоянии
				if (i < j) {
					d[1][j] = (d[1][j] + s[0][j - 1]) % M;
					d[1][j] = d[1][j] - s[0][i - 1];
					if (d[1][j] < 0)
						d[1][j] += M;
				}
			}

			// сохраняем сумму количества монет на платформе для текущего положения рычагов
			s[1][j] = (s[1][j - 1] + d[1][j]) % M;
		}

		// сохраняем текущее состояние для использования в следующей итерации
		for (int j = 1; j <= n; j++) {
			d[0][j] = d[1][j];
			s[0][j] = s[1][j];
		}
	}

	std::cout << d[1][n] << std::endl;
	return 0;
}

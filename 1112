#include <iostream>
#include <stdio.h>


//структура для координат отрезков
struct segment 
{
    int p1, p2;
};

//структура для хранения количества и номера отрезка
struct mass 
{
    int index, number;
};

//создаем массив из координат
segment a[110];
//и массив для хранения информации об отрезках
mass d[3000];
int n;

int main() {
    std::cin >> n;
    //вводим координаты и проверяем правильность ввода,
    //т.е если координата начала больше координаты конца,
    //меняем их местами
    for (int i = 0; i < n; i++) {
        std::cin >> a[i].p1 >> a[i].p2;
        if (a[i].p1 > a[i].p2) {
            int c = a[i].p1;
            a[i].p1 = a[i].p2;
            a[i].p2 = c;
        }
    }

    //формируем возрастающую последовательнсть
    //количества отрезков которые не будут удалены
    for (int i = 1; i <= 2050; i++) {
        d[i].number = d[i - 1].number;
        d[i].index = d[i - 1].index;

        for (int j = 0; j < n; j++)
            //проверяем можно ли добавить отрезок, который не нужно удалять
            //если можно то прибавляем к количеству отрезков единицу и 
            //запоминаем чему равен индекс данного отрезка
            if (a[j].p2 == i - 1000) 
            {
                if (d[a[j].p1 + 1000].number + 1 > d[i].number) {
                    d[i].number = d[a[j].p1 + 1000].number + 1;
                    d[i].index = j;
                }
            }
    }

    //выводим 2000 - наибольший элемент последовательности,
    //потому что всего координам может быть 2000
    //и мы выводим последнее получившееся число
    std::cout << d[2000].number << std::endl;

    //создаем массив для вывода подходящих отрезков
    segment ans[110];
    int nans = 0;

    int i = 2000;
    //пока не проверим все отрезки(всего их d[2000].number) 
    while (d[i].number > 0) 
    {
        //берем индекс отрезка
        ans[nans] = a[d[i].index];
        nans++;
        //переназначаем i
        i = a[d[i].index].p1 + 1000;
    }

    //выводим координаты
    for (int i = nans - 1; i >= 0; i--)
        std::cout << ans[i].p1 << ans[i].p2 << std::endl;

    return 0;
}
